{"ast":null,"code":"import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport * as actions from './contactsActions';\nconst contactsReducer = createReducer([], {\n  [actions.fetchAllContactsSuccess]: (state, action) => action.payload,\n  [actions.addContactSuccess]: (state, action) => [...state, action.payload],\n  [actions.deleteContactSuccess]: (state, action) => state.filter(contacts => contacts.id !== action.payload)\n});\nconst loadingReducer = createReducer(false, {\n  // Fetch All Contacts\n  [actions.fetchAllContactsRequest]: () => true,\n  [actions.fetchAllContactsSuccess]: () => false,\n  [actions.fetchAllContactsError]: () => false,\n  // Add Contact\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccess]: () => false,\n  [actions.addContactError]: () => false,\n  // Delete Contact\n  [actions.deleteContactRequest]: () => true,\n  [actions.deleteContactSuccess]: () => false,\n  [actions.deleteContactError]: () => false\n});\nconst errorReducer = createReducer(null, {\n  // Fetch All Contacts\n  [actions.fetchAllContactsRequest]: () => null,\n  [actions.fetchAllContactsError]: (state, action) => action.payload,\n  // Add Contact\n  [actions.addContactRequest]: () => null,\n  [actions.addContactError]: (state, action) => action.payload,\n  // Delete Contact\n  [actions.deleteContactRequest]: () => null,\n  [actions.deleteContactError]: (state, action) => action.payload\n});\nconst filterReducer = createReducer('', {\n  [actions.changeFilter]: (state, action) => action.payload\n});\nexport default combineReducers({\n  items: contactsReducer,\n  loading: loadingReducer,\n  error: errorReducer,\n  filter: filterReducer\n});","map":{"version":3,"sources":["C:/Users/Misha/Desktop/Code/React/goiteens-react-2020/src/redux/contacts/contactsReducer.js"],"names":["createReducer","combineReducers","actions","contactsReducer","fetchAllContactsSuccess","state","action","payload","addContactSuccess","deleteContactSuccess","filter","contacts","id","loadingReducer","fetchAllContactsRequest","fetchAllContactsError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","errorReducer","filterReducer","changeFilter","items","loading","error"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,eAAxB,QAA+C,kBAA/C;AAEA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,MAAMC,eAAe,GAAGH,aAAa,CAAC,EAAD,EAAK;AACxC,GAACE,OAAO,CAACE,uBAAT,GAAmC,CAACC,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OADrB;AAExC,GAACL,OAAO,CAACM,iBAAT,GAA6B,CAACH,KAAD,EAAQC,MAAR,KAAmB,CAAC,GAAGD,KAAJ,EAAWC,MAAM,CAACC,OAAlB,CAFR;AAGxC,GAACL,OAAO,CAACO,oBAAT,GAAgC,CAACJ,KAAD,EAAQC,MAAR,KAC9BD,KAAK,CAACK,MAAN,CAAcC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBN,MAAM,CAACC,OAAlD;AAJsC,CAAL,CAArC;AAOA,MAAMM,cAAc,GAAGb,aAAa,CAAC,KAAD,EAAQ;AAC1C;AACA,GAACE,OAAO,CAACY,uBAAT,GAAmC,MAAM,IAFC;AAG1C,GAACZ,OAAO,CAACE,uBAAT,GAAmC,MAAM,KAHC;AAI1C,GAACF,OAAO,CAACa,qBAAT,GAAiC,MAAM,KAJG;AAK1C;AACA,GAACb,OAAO,CAACc,iBAAT,GAA6B,MAAM,IANO;AAO1C,GAACd,OAAO,CAACM,iBAAT,GAA6B,MAAM,KAPO;AAQ1C,GAACN,OAAO,CAACe,eAAT,GAA2B,MAAM,KARS;AAS1C;AACA,GAACf,OAAO,CAACgB,oBAAT,GAAgC,MAAM,IAVI;AAW1C,GAAChB,OAAO,CAACO,oBAAT,GAAgC,MAAM,KAXI;AAY1C,GAACP,OAAO,CAACiB,kBAAT,GAA8B,MAAM;AAZM,CAAR,CAApC;AAeA,MAAMC,YAAY,GAAGpB,aAAa,CAAC,IAAD,EAAO;AACvC;AACA,GAACE,OAAO,CAACY,uBAAT,GAAmC,MAAM,IAFF;AAGvC,GAACZ,OAAO,CAACa,qBAAT,GAAiC,CAACV,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OAHpB;AAIvC;AACA,GAACL,OAAO,CAACc,iBAAT,GAA6B,MAAM,IALI;AAMvC,GAACd,OAAO,CAACe,eAAT,GAA2B,CAACZ,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC,OANd;AAOvC;AACA,GAACL,OAAO,CAACgB,oBAAT,GAAgC,MAAM,IARC;AASvC,GAAChB,OAAO,CAACiB,kBAAT,GAA8B,CAACd,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AATjB,CAAP,CAAlC;AAYA,MAAMc,aAAa,GAAGrB,aAAa,CAAC,EAAD,EAAK;AACtC,GAACE,OAAO,CAACoB,YAAT,GAAwB,CAACjB,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACC;AADZ,CAAL,CAAnC;AAIA,eAAeN,eAAe,CAAC;AAC7BsB,EAAAA,KAAK,EAAEpB,eADsB;AAE7BqB,EAAAA,OAAO,EAAEX,cAFoB;AAG7BY,EAAAA,KAAK,EAAEL,YAHsB;AAI7BV,EAAAA,MAAM,EAAEW;AAJqB,CAAD,CAA9B","sourcesContent":["import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport * as actions from './contactsActions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [actions.fetchAllContactsSuccess]: (state, action) => action.payload,\r\n  [actions.addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [actions.deleteContactSuccess]: (state, action) =>\r\n    state.filter((contacts) => contacts.id !== action.payload),\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  // Fetch All Contacts\r\n  [actions.fetchAllContactsRequest]: () => true,\r\n  [actions.fetchAllContactsSuccess]: () => false,\r\n  [actions.fetchAllContactsError]: () => false,\r\n  // Add Contact\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n  // Delete Contact\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n});\r\n\r\nconst errorReducer = createReducer(null, {\r\n  // Fetch All Contacts\r\n  [actions.fetchAllContactsRequest]: () => null,\r\n  [actions.fetchAllContactsError]: (state, action) => action.payload,\r\n  // Add Contact\r\n  [actions.addContactRequest]: () => null,\r\n  [actions.addContactError]: (state, action) => action.payload,\r\n  // Delete Contact\r\n  [actions.deleteContactRequest]: () => null,\r\n  [actions.deleteContactError]: (state, action) => action.payload,\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: contactsReducer,\r\n  loading: loadingReducer,\r\n  error: errorReducer,\r\n  filter: filterReducer,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}